{"version":3,"sources":["context.js","components/inputs.js","components/brdElmt.js","components/board.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","ConProvider","Provider","Inputs","context","useContext","id","className","style","color","fontSize","width","type","onChange","e","d","Date","target","value","sndDate","getDate","getMonth","getFullYear","clickHand","BrdElmt","props","data","count","date","matches","city","display","Board","nlist","klist","map","x","i","key","match","stadium","App","useState","setKlist","day","month","year","axios","get","then","res","textAlign","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAEMA,EAAUC,IAAMC,cAAc,IAEvBC,EAAcH,EAAQI,SAEpBJ,ICcAK,MAjBf,WACI,IAAMC,EAAUC,qBAAWP,GAO3B,OACI,yBAAKQ,GAAG,MAAMC,UAAU,OACpB,yBAAKC,MAAO,CAACC,MAAQ,QAASC,SAAW,OAAQC,MAAQ,OAAQJ,UAAU,eAA3E,oBACiB,2BAAOK,KAAK,OAAON,GAAG,OAAQO,SAAU,SAACC,GAAD,OAR/C,SAACA,GACf,IAAIC,EAAI,IAAIC,KAAKF,EAAEG,OAAOC,OAC1Bd,EAAQe,QAAQJ,EAAEK,UAAWL,EAAEM,WAAW,EAAGN,EAAEO,eAMqBC,CAAUT,SCAvEU,MAZf,SAAiBC,GAAO,IAAD,EACkBA,EAAMC,KAApCC,EADY,EACZA,MAAOC,EADK,EACLA,KAAMC,EADD,EACCA,QAASC,EADV,EACUA,KAC7B,OACI,yBAAKtB,MAAO,CAACC,MAAQ,QAASsB,QAAU,QAASxB,UAAU,OACvD,yBAAKA,UAAU,UAAUC,MAAO,CAACG,MAAQ,UAAWgB,GACpD,yBAAKpB,UAAU,UAAUC,MAAO,CAACG,MAAQ,UAAWiB,GACpD,yBAAKrB,UAAU,UAAUC,MAAO,CAACG,MAAQ,UAAWkB,GACpD,yBAAKtB,UAAU,UAAUC,MAAO,CAACG,MAAQ,UAAWmB,KCkBjDE,MAvBf,WAEI,IAEIC,EAFY5B,qBAAWP,GAEPoC,MAAMC,KAAI,SAACC,EAAGC,GAC9B,OACI,kBAAC,EAAD,CAASC,IAAKD,EAAGX,KAAM,CAACC,MAAQS,EAAET,MAAOC,KAAOQ,EAAER,KAAMC,QAAUO,EAAEG,MAAOT,KAAOM,EAAEI,cAI5F,OACI,yBAAKlC,GAAG,QAAQC,UAAU,OACtB,yBAAKC,MAAO,CAACC,MAAQ,QAASsB,QAAU,QAASxB,UAAU,OACvD,yBAAKA,UAAU,OAAOC,MAAO,CAACG,MAAQ,UAAtC,SACA,yBAAKJ,UAAU,OAAOC,MAAO,CAACG,MAAQ,UAAtC,QACA,yBAAKJ,UAAU,OAAOC,MAAO,CAACG,MAAQ,UAAtC,WACA,yBAAKJ,UAAU,OAAOC,MAAO,CAACG,MAAQ,UAAtC,SAEHsB,I,iBCMEQ,MAtBf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENR,EAFM,KAECS,EAFD,KAWb,OACE,kBAAC1C,EAAD,CAAaiB,MAAO,CAACgB,QAAOf,QARd,SAACyB,EAAKC,EAAOC,GAC3BC,IAAMC,IAAN,uFAA0FF,EAA1F,YAAkGD,EAAlG,YAA2GD,IACxGK,MAAK,SAACC,GACLP,EAASO,EAAIxB,YAMf,yBAAKpB,GAAG,QACN,wBAAIE,MAAO,CAACC,MAAQ,QAAS0C,UAAY,SAAUzC,SAAW,QAASH,UAAU,WAAjF,kBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCVY6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2DCZNiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMb,MAAK,SAAAc,GACjCA,EAAaC,kB","file":"static/js/main.7d6dea2a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Context = React.createContext({});\n\nexport const ConProvider = Context.Provider\n\nexport default Context;","import React, {useContext} from 'react';\nimport Context from '../context'\n\nfunction Inputs(){\n    const context = useContext(Context);\n\n    const clickHand = (e) => {\n        let d = new Date(e.target.value)\n        context.sndDate(d.getDate(), d.getMonth()+1, d.getFullYear());\n    }\n\n    return(\n        <div id=\"inp\" className=\"mid\">\n            <div style={{color : \"white\", fontSize : \"25px\", width : \"74%\"}} className=\"mid heading\">\n            Enter the date : <input type=\"date\" id=\"date\"  onChange={(e) => clickHand(e)} />\n            </div>\n        </div>\n    );\n}\n\nexport default Inputs;","import React from 'react';\n\nfunction BrdElmt(props){\n    const {count, date, matches, city} = props.data;\n    return(\n        <div style={{color : \"white\", display : \"flex\"}} className=\"mid\">\n            <div className=\"item mm\" style={{width : \"200px\"}}>{count}</div>\n            <div className=\"item mm\" style={{width : \"250px\"}}>{date}</div>\n            <div className=\"item mm\" style={{width : \"300px\"}}>{matches}</div>\n            <div className=\"item mm\" style={{width : \"300px\"}}>{city}</div>\n        </div>\n    );\n}\n\nexport default BrdElmt;","import React, {useContext} from 'react';\nimport BrdElmt from './brdElmt'\nimport Context from '../context'\n\nfunction Board(){\n\n    const context = useContext(Context);\n\n    let nlist = context.klist.map((x, i) => {\n        return(\n            <BrdElmt key={i} data={{count : x.count, date : x.date, matches : x.match, city : x.stadium}} />\n        )\n    })\n\n    return(\n        <div id=\"board\" className=\"mid\">\n            <div style={{color : \"white\", display : \"flex\"}} className=\"mid\">\n                <div className=\"item\" style={{width : \"200px\"}}>Count</div>\n                <div className=\"item\" style={{width : \"250px\"}}>Date</div>\n                <div className=\"item\" style={{width : \"300px\"}}>Matches</div>\n                <div className=\"item\" style={{width : \"300px\"}}>City</div>\n            </div>\n            {nlist}\n        </div>\n    );\n}\n\nexport default Board;","import React, {useState} from 'react';\nimport Inputs from './components/inputs';\nimport Board from './components/board';\nimport axios from 'axios';\nimport {ConProvider} from './context';\n\nfunction App() {\n\n  const [klist, setKlist] = useState([])\n\n  const sndDate = (day, month, year) => {\n    axios.get(`http://ec2-13-232-192-167.ap-south-1.compute.amazonaws.com:8080/api/schedule/${year}/${month}/${day}`)\n      .then((res) => {\n        setKlist(res.data);\n      });\n  }\n\n  return (\n    <ConProvider value={{klist, sndDate}}>\n      <div id=\"main\">\n        <h1 style={{color : \"white\", textAlign : \"center\", fontSize : \"50px\"}} className=\"heading\">IPL Game Board</h1>\n        <Inputs />\n        <Board />\n      </div>\n    </ConProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}